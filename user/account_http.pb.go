// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.4
// - protoc             v4.25.4
// source: user/account.proto

package user

import (
	context "context"
	common "github.com/biny-go/eagproto/common"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationAccountDeleteAccount = "/user.Account/DeleteAccount"
const OperationAccountGetAccount = "/user.Account/GetAccount"
const OperationAccountListAccount = "/user.Account/ListAccount"
const OperationAccountSaveAccount = "/user.Account/SaveAccount"

type AccountHTTPServer interface {
	DeleteAccount(context.Context, *DeleteAccountRequest) (*common.BaseResult, error)
	GetAccount(context.Context, *GetAccountRequest) (*common.BaseResult, error)
	ListAccount(context.Context, *ListAccountRequest) (*common.BaseResultArray, error)
	SaveAccount(context.Context, *SaveAccountRequest) (*common.BaseResult, error)
}

func RegisterAccountHTTPServer(s *http.Server, srv AccountHTTPServer) {
	r := s.Route("/")
	r.POST("/account", _Account_SaveAccount0_HTTP_Handler(srv))
	r.DELETE("/account", _Account_DeleteAccount0_HTTP_Handler(srv))
	r.GET("/account", _Account_GetAccount0_HTTP_Handler(srv))
	r.POST("/account/list", _Account_ListAccount0_HTTP_Handler(srv))
}

func _Account_SaveAccount0_HTTP_Handler(srv AccountHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SaveAccountRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAccountSaveAccount)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SaveAccount(ctx, req.(*SaveAccountRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*common.BaseResult)
		return ctx.Result(200, reply)
	}
}

func _Account_DeleteAccount0_HTTP_Handler(srv AccountHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteAccountRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAccountDeleteAccount)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteAccount(ctx, req.(*DeleteAccountRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*common.BaseResult)
		return ctx.Result(200, reply)
	}
}

func _Account_GetAccount0_HTTP_Handler(srv AccountHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetAccountRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAccountGetAccount)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetAccount(ctx, req.(*GetAccountRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*common.BaseResult)
		return ctx.Result(200, reply)
	}
}

func _Account_ListAccount0_HTTP_Handler(srv AccountHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListAccountRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAccountListAccount)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListAccount(ctx, req.(*ListAccountRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*common.BaseResultArray)
		return ctx.Result(200, reply)
	}
}

type AccountHTTPClient interface {
	DeleteAccount(ctx context.Context, req *DeleteAccountRequest, opts ...http.CallOption) (rsp *common.BaseResult, err error)
	GetAccount(ctx context.Context, req *GetAccountRequest, opts ...http.CallOption) (rsp *common.BaseResult, err error)
	ListAccount(ctx context.Context, req *ListAccountRequest, opts ...http.CallOption) (rsp *common.BaseResultArray, err error)
	SaveAccount(ctx context.Context, req *SaveAccountRequest, opts ...http.CallOption) (rsp *common.BaseResult, err error)
}

type AccountHTTPClientImpl struct {
	cc *http.Client
}

func NewAccountHTTPClient(client *http.Client) AccountHTTPClient {
	return &AccountHTTPClientImpl{client}
}

func (c *AccountHTTPClientImpl) DeleteAccount(ctx context.Context, in *DeleteAccountRequest, opts ...http.CallOption) (*common.BaseResult, error) {
	var out common.BaseResult
	pattern := "/account"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAccountDeleteAccount))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *AccountHTTPClientImpl) GetAccount(ctx context.Context, in *GetAccountRequest, opts ...http.CallOption) (*common.BaseResult, error) {
	var out common.BaseResult
	pattern := "/account"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAccountGetAccount))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *AccountHTTPClientImpl) ListAccount(ctx context.Context, in *ListAccountRequest, opts ...http.CallOption) (*common.BaseResultArray, error) {
	var out common.BaseResultArray
	pattern := "/account/list"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAccountListAccount))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *AccountHTTPClientImpl) SaveAccount(ctx context.Context, in *SaveAccountRequest, opts ...http.CallOption) (*common.BaseResult, error) {
	var out common.BaseResult
	pattern := "/account"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAccountSaveAccount))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
